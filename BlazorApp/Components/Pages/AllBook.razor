@page "/AllBook"
@inject DatabaseService databaseService
@inject NavigationManager navManager
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime


@if (allBooks == null)
{
    <p>Loading books...</p>
}
else if (allBooks.Count == 0)
{
    <p>No books available.</p>
}
else
{
    <div class="search-container">
        <input type="text" placeholder="Search by title, author, category, or ISBN" @bind="searchQuery" @bind:event="oninput" />
        <button @onclick="FilterBooks">Search</button>
    </div>

    <h2>All Books</h2>
    <div class="books-container">

    @foreach (var book in allBooks)
    {
        <div class="book-card" >
            <div class="book-item">
                    <img src="@book.ImagePath" alt="Book cover" class="book-image" @onclick="() => ViewBookDetails(book.Id)" />
                <div>
                    <div class="book-details">
                        <h2>@book.Title</h2>
                        <p>@book.Author</p>
                        <p>kr. @book.Price</p>
                        <button @onclick="@( () =>  databaseService.AddToCart(book.Id,user))"> Add to cart  </button>

                    </div>
                </div>
            </div>
        </div>
    }
    </div>
}

@code {
    private List<UsedBooks> allBooks;
    private string searchQuery = string.Empty;
    public int user { get; set; }

    protected override void OnInitialized()
    {
        allBooks = databaseService.GetAllUsedBooks();
        user = -1;
    }

    void ViewBookDetails(int bookId)
    {
        navManager.NavigateTo($"/bookpage/{bookId}");
    }

    private void FilterBooks()
    {
        allBooks = databaseService.GetAllUsedBooks();

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            string lowerCaseSearchQuery = searchQuery.ToLower();

            allBooks = allBooks.Where(book =>
                book.Title.ToLower().Contains(lowerCaseSearchQuery) ||
                book.Author.ToLower().Contains(lowerCaseSearchQuery) ||
                book.Category.ToLower().Contains(lowerCaseSearchQuery) ||
                book.ISBN.ToString().ToLower().Contains(lowerCaseSearchQuery)
            ).ToList();
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await getuser();
        }
    }

    public async Task getuser()
    {
        Console.WriteLine("Attempting to retrieve user ID from localStorage...");
        string userIdString = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "CurrentUser_UserID");
        Console.WriteLine($"Retrieved user ID: {userIdString}");

        if (!string.IsNullOrEmpty(userIdString))
        {
            user = int.Parse(userIdString);
            Console.WriteLine($"Parsed user ID: {user}");
        }
        else
        {
            Console.WriteLine("User ID not found in localStorage.");
            user = -1;

        }
        StateHasChanged(); // Force update
    }


}
