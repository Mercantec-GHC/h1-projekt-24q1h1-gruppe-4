@page "/bookpage/{productId:int}"
@inject DatabaseService databaseService
@inject NavigationManager navManager
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

@if (ProductToShow != null)
{
    <div class="ProductDetail">
        <div class="BookDetailGodContainer">
        <div class="CurrentBookImageContainer">
            <img class="CurrentBookImage" src="@ProductToShow.ImagePath" alt="Book Image">
        </div>
            <div class="BookDetailContainer">
                <div class="BookDetailRightContainer">
                    <div class="BookTitleStars">
                        <div class="Stars">
                                <!-- Dynamically generate star images based on rating -->
                        </div>

                        <!-- Reviews Section -->
                        @if (reviewList != null && reviewList.Count > 0)
                        {
                            float rating = 0.0f;
                            @foreach (var review in reviewList)
                            {
                                rating += review.Rating;
                            }
                            <div class="RatingAndFedbackNumber">
                                <div class="StarSellerRating">@(rating / reviewList.Count) Star Seller Rating</div>
                                <div class="UserFedback">(@(reviewList.Count) User Feedback)</div>
                            </div>
                        }
                        else
                        {
                            <h3>No reviews found in database.</h3>
                        }

                        <h2 class="TitleOfTheBook">@ProductToShow.Title</h2>
                    
                    </div>
                    <div class="BookInformation1Container">
                        <div class="BookInformation1Row1">
                            <div class="Author"> Author: @ProductToShow.Author</div>
                            <div class="RelaseDate"> Release Date: @ProductToShow.ReleaseDate.ToString("dd/MM/yyyy")</div>
                        </div>
                        <div class="BookInformation1Row2">
                            <div class="Isbn"> ISBN: @ProductToShow.ISBN</div>
                            <div class="Category"> Category: @ProductToShow.Category</div>
                        </div>
                </div>
                    </div>
                    <div class="PriceContainer">
                        <div class="Price">
                            <div class="Kr"> Price: @ProductToShow.Price.ToString("C")</div>
                        </div>
                    </div>
            <div class="Devider"></div>
                    <div class="BookInformation2Container">
                        <div class="BookInformation2Row1">
                            <div class="Format"> Format: @ProductToShow.Format</div>
                            <div class="Weight"> Weight: @ProductToShow.Weight</div>
                        </div>
                        <div class="BookInformation2Row2">
                            <div class="Language"> Language: @ProductToShow.Language</div>
                            <div class="Pages"> Pages: @ProductToShow.Pages</div>
                        </div>
                    </div>

                    <div class="AddToCartJoinBookclubContainer">
                    <button class="AddToCartButton" @onclick="@( () =>  databaseService.AddToCart(ProductToShow.Id,user))">
                            <div class="Label1">ADD TO CARD</div>
                        <img class="ShoppingCartLogo" src="/images/ShoppingCartLogo.svg">
                        </button>
                        <div class="JoinBookclubButton">
                            <div class="Label2">JOIN BOOKCLUB</div>
                        </div>
                    </div>

                    <div class="AddToFavoritesShareProductContainer">
                        <div class="AddToFavoritesButton">
                            <div class="AddToFavorites">
                                <img class="Heart" src="/images/HeartLogo.svg">
                                <div class="AddToFavorites">Add to favorites</div>
                            </div>
                        </div>
                        <div class="ShareProduct">
                            <div class="ShareProduct">Share product:</div>
                            <div class="SocialIcon">
                                <img class="CopyLogo" src="/images/CopyLogo.svg">   
                                <img class="Facebook" src="/images/FacebookLogo.svg">
                                <img class="Twitter" src="/images/TwitterLogo.svg">
                            </div>

                        </div>
                    </div>

                    <div class="SafeCheckoutInformationContainer">
                        <div class="GuaranteeSafeCheckout">100% Guarantee Safe Checkout</div>
                        <img class="PaymentMethod" src="/images/PaymentMethodLogo.svg">
                    </div>
            </div>
        </div>

        <div class="BookInformation3Container">
            <div class="BookInformation3ToggleBar">
                <div class="DescriptionButton" @onclick="SetToDescriptionTab">
                    <div class="Description">Description</div>
                </div>
                <div class="SellersInformationButton" @onclick="SetToSellersInformationTab">
                    <div class="SellersInformation">Sellers Information</div>
                </div>
                <div class="ReviewsButton" @onclick="SetToReviewsTab">
                    <div class="Reviews">Reviews</div>
                </div>

            </div>

            <div class="Devider2"></div>

            <div class="BookInformation3SubContainer">

                @if (activeTab == "Description")
                {
                <div class="DescriptionContainer">
                    <div class="DescriptionHeader">Description</div>
                    <div class="DescriptionContent"> @ProductToShow.Description</div>
                </div>

                <div class="FeatureContainer">
                    <div class="Feature">Feature</div>
                    <div class="FeatureSubContainer">
                        <div class="DayReturnPolicyContainer">
                            <div class="MedalSymbol">
                                <img src="/images/MedalSymbol.svg">
                            </div>
                            <div class="Free1YearWarranty">30 Day return policy</div>
                        </div>
                        <div class="FreeShippingFastedDeliveryContainer">
                            <div class="TruckSymbol">
                                <img src="/images/TruckSymbol.svg">
                            </div>
                            <div class="FreeShippingFastedDelivery">Free Shipping & Fast Delivery</div>
                        </div>
                        <div class="MoneyBackGuaranteeContainer">
                            <div class="HandshakeSymbol">
                                <img src="/images/HandshakeSymbol.svg">
                            </div>
                            <div class="MoneyBackGuarantee">100% Money-back guarantee</div>
                        </div>
                        <div class="CustomerSupportContainer">
                            <div class="HeadphonesSymbol">
                                <img src="/images/HeadphonesSymbol.svg">
                            </div>
                            <div class="CustomerSupport">24/7 Customer support</div>
                        </div>
                        <div class="SecurePaymentMethodContainer">
                            <div class="CreditcardSymbol">
                                <img src="/images/CreditCardSymbol.svg">
                            </div>
                            <div class="SecurePaymentMethod">Secure payment method</div>
                        </div>
                    </div>
                </div>

                <div class="Devider3"></div>

                <div class="ShippingInformationContainer">
                    <div class="ShippingInformation">Shipping Information</div>
                    <div class="ShippingInformationSubContainer">
                        <div class="DhlPackageShop">
                            <div class="DhlPackageShop">DHL Package Shop: </div>
                            <div class="DhlPackageShop"> 2 - 4 days, free shipping</div>
                        </div>
                        <div class="DhlHomeDelivery">
                            <div class="DhlHomeDelivery">DHL Home Delivery: </div>
                            <div class="DhlHomeDelivery"> 2-3 days, kr. 19.00</div>
                        </div>
                        <div class="DhlExpressDelivery">
                            <div class="DhlExpressDelivery">DHL Express Delivery: </div>
                            <div class="DhlExpressDelivery"> 1 - 2 days, kr. 49.00</div>
                        </div>
                        <div class="DhlGlobalExport">
                            <div class="DhlGlobalExport">DHL Global Export: </div>
                            <div class="DhlGlobalExport"> 4 - 10 days, kr. 89.00</div>
                        </div>
                    </div>
                </div>
                }

                else if (activeTab == "Reviews")
                {
                    
                    @if (reviewList != null && reviewList.Count > 0)
                    {
                        float rating = 0.0f;
                        <div class="reviews-wrapper">
                        <h3 class ="reviews-header">Reviews:</h3>
                        @foreach (var review in reviewList)
                        {
                            <p class="review">@review.ReviewString</p>
                            rating += review.Rating;
                        }
                        </div>
                    }
                    
                    else
                    {
                        <h3>No reviews found in database.</h3>
                    }
                }
            </div>
        </div>        

        <div class="RecommendedBooks">Recommended Books</div>

        @if (firstTwelveBooks != null && firstTwelveBooks.Count > 0)
        {
            <div class="RecommendedBooksContainer">
                @foreach (var book in firstTwelveBooks)
                {
                    <div class="RecommendedBookContainer" @onclick="() => NavigateToBook(book.Id)">
                        <img class="RecommendedBookImage" src="@book.ImagePath">
                        <div class="RecommendedBookContent">
                            <div class="BookTitle">@book.Title</div>
                            <div class="Price">Kr. @book.Price.ToString("C")</div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

else
{
    <p>Book details are currently loading...</p>
}

@code {
    [Parameter]
    public int productId { get; set; }
    private string activeTab = "Description";

    private UsedBooks ProductToShow;
    private List<UsedBooks> firstTwelveBooks;
    public List<Review> reviewList { get; set; }
    public int user { get; set; }

    protected override void OnInitialized()
    {
        firstTwelveBooks = databaseService.GetFirstTwelveBooks();
        user = -1;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LoadBookDetails(productId);
    }

    private void LoadBookDetails(int productId)
    {
        ProductToShow = databaseService.GetUsedBookById(productId);
        reviewList = databaseService.GetReviews(ProductToShow.ISBN);
        StateHasChanged();
    }

    void NavigateToBook(int bookId)
    {
        navManager.NavigateTo($"/bookpage/{bookId}");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await getuser();
        }
    }

    public async Task getuser()
    {
        Console.WriteLine("Attempting to retrieve user ID from localStorage...");
        string userIdString = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "CurrentUser_UserID");
        Console.WriteLine($"Retrieved user ID: {userIdString}");

        if (!string.IsNullOrEmpty(userIdString))
        {
            user = int.Parse(userIdString);
            Console.WriteLine($"Parsed user ID: {user}");
        }
        else
        {
            Console.WriteLine("User ID not found in localStorage.");
            user = -1;

        }
        StateHasChanged(); // Force update
    }

    void SetToDescriptionTab() => SetActiveTab("Description");
    void SetToSellersInformationTab() => SetActiveTab("SellersInformation");
    void SetToReviewsTab() => SetActiveTab("Reviews");

    void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }
}
        













