@page "/login"
@inject AppState AppState
@inject DatabaseService databaseService
@inject NavigationManager navManager
@inject AuthenticationService authService
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="mt-5">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="container" style="max-width: 400px;">
        <div class="text-center mb-4">
            <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1>
        </div>

        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="@loginModel.Username" required />
            <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="@loginModel.Password" required />
            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-lg btn-primary btn-block">Sign in</button>
        </div>

        <div class="form-group">
            <a href="/signup" class="btn btn-lg btn-primary btn-block">Create account</a>
        </div>

        <div class="text-danger">@errorMessage</div>

        @if (AppState.LoggedIn)
        {
            <button @onclick="Logout" class="btn btn-danger">Logout</button>
        }

    </div>
</EditForm>



@code {

    private LoginModel loginModel = new LoginModel();

    private string errorMessage = "";

<<<<<<< HEAD
    private int userId;  // Variable to hold the UserID

    private async Task HandleLogin()
=======
    private async Task HandleLogin()
    {
        await authService.Login(loginModel.Username, loginModel.Password);
        if (authService.IsAuthenticated)
        {
            Console.WriteLine($"Logging in {loginModel.Username}");
            AppState.LoggedIn = true;
            navManager.NavigateTo("MainLayout");
        }
        else
        {
            errorMessage = "Invalid username or password. Please try again.";
        }
    }
>>>>>>> 9c9f40f5ccbd8b8efae1a743ecfe171279df16be

    {

        await authService.Login(loginModel.Username, loginModel.Password);
        if (authService.IsAuthenticated == true)

        {

            userId = authService.CurrentUser.UserID;  // Store UserID in local variable

            Console.WriteLine($"Logging in {loginModel.Username} with ID {userId}");

            AppState.LoggedIn = true;


            navManager.NavigateTo("/");

        }

        else

        {

            errorMessage = "Invalid username or password. Please try again.";

        }

    }
 
    private async Task Logout()

    {

        await authService.Logout();

        AppState.LoggedIn = false;

        navManager.NavigateTo("/login");

    }

}

